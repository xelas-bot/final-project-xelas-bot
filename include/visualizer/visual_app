#pragma once

#include "cinder/app/App.h"
#include "cinder/app/RendererGl.h"
#include "cinder/gl/gl.h"
#include "particle_handler.h"
#include "histogram.h"
#include "visualizer/player.h"
#include "cinder/audio/audio.h"

namespace naivebayes {

    namespace visualizer {

        class VisualApp : public ci::app::App {
        public:
            VisualApp();


            void draw() override;


            void keyDown(ci::app::KeyEvent event) override;


            //Game State Methods
            void ResetPlayingField();
            void NewGame();
            void DisplayScore();
            void InitiateStartScreen();
            //

            void update() override;

            void setup() override;

            void keyUp(ci::app::KeyEvent event) override;

            bool leftHeldDown = false;
            bool rightHeldDown = false;

            glm::vec2 preJumpVelocity = {0,0};
            bool keyedUpWhileAirborne = false;

            glm::vec2 preJumpVelocityTwo = {0,0};
            bool keyedUpWhileAirborneTwo = false;



            const double kWindowSize = 875;
            const double kMargin = 100;
            const double kContainerSize = 680;
            const size_t kImageDimension = 28;

        private:
            Histogram histogram_;
            double speedMult_ = 1.0;
            particle_handler particleHandler_;
            Particle particle_;
            player* player_;
            player* player_two_;

            bool GoalChecker();


            //Frame Timer Variable
            long frameCount_ = 0;
            long elapsedFrames_=0;




            //Game State Variables
            int current_player_score_ =0;
            int current_opponent_score=0;
            bool Menu_State = true;
            bool Start_Button = false;
            float k_goal_height_ = 300;
            float k_goal_width_ = 100;
            bool goal_scored = false;
            bool two_player_selected_=true;


            //Audio Files
            ci::audio::VoiceRef mVoice;
            ci::audio::VoiceRef goal_;
            ci::audio::VoiceRef ball_hit_;
            ci::audio::VoiceRef start_sound_;


        };

    }  // namespace visualizer

}  // namespace naivebayes