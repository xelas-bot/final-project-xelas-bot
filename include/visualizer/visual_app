#pragma once

#include "cinder/app/App.h"
#include "cinder/app/RendererGl.h"
#include "cinder/gl/gl.h"
#include "particle_handler.h"

#include "visualizer/player.h"
#include "cinder/audio/audio.h"

namespace engine {
    namespace visualizer {

        class VisualApp : public ci::app::App {
        public:
            VisualApp();

            // Cinder visualizer methods
            void draw() override;

            void keyDown(ci::app::KeyEvent event) override;

            void update() override;

            void setup() override;

            void keyUp(ci::app::KeyEvent event) override;

        private:

            // Button State Variables
            bool leftHeldDown = false;
            bool rightHeldDown = false;
            glm::vec2 preJumpVelocity = {0, 0};
            bool keyedUpWhileAirborne = false;
            glm::vec2 preJumpVelocityTwo = {0, 0};
            bool keyedUpWhileAirborneTwo = false;

            // Container Variables
            const double kWindowSize = 875;
            const double kMargin = 100;
            const double kContainerSize = 680;
            const size_t kImageDimension = 28;

            // Player/Particle Variables
            double speedMult_ = 1.0;
            Particle_handler particleHandler_;
            Particle particle_;
            Player *player_;
            Player *player_two_;


            // Frame Timer Variable
            long frameCount_ = 0;
            long elapsedFrames_ = 0;


            // Game State Default Variables
            int current_player_score_ = 0;
            int current_opponent_score = 0;
            bool Menu_State = true;
            bool Start_Button = false;
            float k_goal_height_ = 300;
            float k_goal_width_ = 100;
            bool goal_scored = false;
            bool two_player_selected_ = false;


            // Audio Files
            ci::audio::VoiceRef jump_sound_;
            ci::audio::VoiceRef goal_;

            // Game State Methods

            /**
             * Resets Player positions
             *
             */
            void ResetPlayingField();

            /**
             * Creates new game set
             *
             */
            void NewGame();

            /**
             * Displays Score Board
             *
             */
            void DisplayScore();

            /**
             * Initiates Menu Screen
             *
             */
            void InitiateStartScreen();

            /**
             * Checks if goal is scored
             *
             * @return true if goal scored, false otherwise
             */
            bool GoalChecker();


        };

    }  // namespace visualizer

}  // namespace engine